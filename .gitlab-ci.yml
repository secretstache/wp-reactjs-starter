stages:
    - validate
    - build
    - test
    - deploy

image: matzeeable/ci-php-composer-node:latest

variables:
    # (CACHE WORKAROUND) Modify the GIT_CLONE_PATH with additional branch slug name, this can result for example in:
    # /builds/runner-938207/john/my-project/development/0/ on your runner server
    # This is necessery in conjunction with GIT_CLEAN_FLAGS=none and /builds must be in your docker shared volume (GitLab Runner).
    GIT_CLONE_PATH: $CI_BUILDS_DIR/runner-$CI_RUNNER_ID/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_COMMIT_REF_SLUG/$CI_CONCURRENT_ID
    # Prefix created compose services so we can act on them (volumes, network, not container because they are named by container_name), should be same as package.json name
    # Also consider that all docker relevant prefixes should also contain the CI_COMMIT_REF_SLUG environment variable
    COMPOSE_PROJECT_NAME: wp-reactjs-starter
    PLUGIN_SLUG: wp-reactjs-starter
    # (CACHE WORKAROUND) Define cache folders for yarn and cypress, so they are within the "non-concurrent-build" folder
    CYPRESS_CACHE_FOLDER: ./.cypress
    YARN_CACHE_FOLDER: ./.yarn
    # Additional settings
    DOCKER_DRIVER: overlay2
    GIT_CLEAN_FLAGS: none # (CACHE WORKAROUND)

# Due to the usage of GIT_CLEAN_FLAGS the cache is no longer used because it is very slow.
# There are some workarounds for caching for this CI pipeline.
# If https://gitlab.com/gitlab-org/gitlab-runner/merge_requests/1173 gets solved the pipeline will reduce
# and will use the standard caching system. Workarounds are marked with (CACHE WORKAROUND).
#cache:
#    key: "$CI_COMMIT_REF_SLUG"
#    untracked: true
#    paths:
#        # Because this are a lot of files the compression for the cache in default zip format is very
#        # slow. See also https://gitlab.com/gitlab-org/gitlab-runner/merge_requests/1173
#        - .cypress/
#        - .yarn/
#        - node_modules/
#        - vendor/

#########################
### Others
#########################

# This is NOT a job and will be ignored by GitLab-CI, it allows before_script per job without duplicate code
.installsteps:
    &installsteps # This is an anchor and can be used with <<: *installsteps (https://gitlab.com/gitlab-org/gitlab-ce/issues/15403)
    before_script:
        - yarn install --frozen-lockfile
        - composer install
        - yarn grunt copy-npmLibs
        - yarn grunt cachebuster:public

#########################
### Stage: validate
#########################

install: # Install all dependencies with previous caches
    <<: *installsteps
    script: echo .
    stage: validate
    except:
        changes:
            - yarn.lockg
            - composer.lock

reinstall: # The reinstall step should install all dependencies from scratch when a lock file got changed
    <<: *installsteps
    script: echo .
    variables:
        GIT_CLEAN_FLAGS: -ffdx
    stage: validate
    only:
        changes:
            - yarn.lock
            - composer.lock

docker e2e purge: # When docker relevant files got changed remove all docker containers automatically
    stage: validate
    variables:
        COMPOSE_PROJECT_NAME_SUB: -ci
    script:
        - chmod +x ./docker/scripts/purge-ci.sh
        - ./docker/scripts/purge-ci.sh
    only:
        changes:
            - docker/**/*
            - .gitlab-ci.yml

#########################
### Stage: build
#########################

docs: # Generate technical documents
    <<: *installsteps
    stage: build
    script:
        - yarn docs
    artifacts:
        name: technical-docs
        paths:
            - docs/

lint: # Lint the project (TS)
    <<: *installsteps
    stage: build
    script: yarn lint

serve and docker e2e: # Create dist files of the plugin and run it through docker
    <<: *installsteps
    stage: build
    variables:
        COMPOSE_PROJECT_NAME_SUB: -ci
    services:
        - docker:dind
    script:
        - yarn serve
        # Make scripts executable
        - chmod +x docker/scripts/*
        # Start CI for E2E and sleep until server is up and running
        - yarn docker-compose-e2e up --build -d
        - export WP_CONTAINER_NAME=$(yarn --silent docker-compose-e2e-name-wordpress)
        - docker cp dist/$PLUGIN_SLUG $WP_CONTAINER_NAME:/var/www/html/wp-content/plugins
        - timeout=500 docker exec $WP_CONTAINER_NAME bash -c 'while [[ \"$(curl --insecure -s -o /dev/null -w ''%{http_code}'' localhost/wp-json/wprjss/v1/plugin)\" != \"200\" ]]; do sleep 2; done'
    artifacts:
        name: installable-plugin
        paths:
            - dist/

#########################
### Stage: test
#########################

docker e2e cypress:
    <<: *installsteps
    dependencies:
        - serve and docker e2e
    variables:
        COMPOSE_PROJECT_NAME_SUB: -ci
    when: always # Always try the e2e test because it should be stopped
    stage: test
    services:
        - docker:dind
    script:
        - >
            docker run --rm --network "$COMPOSE_PROJECT_NAME-ci-$CI_COMMIT_REF_SLUG""_locl" -v "${PWD}":/e2e
            -e CI_COMMIT_REF_SLUG=$CI_COMMIT_REF_SLUG
            -e CI=1
            -v /var/run/docker.sock:/var/run/docker.sock -w /e2e matzeeable/cypress-dind:latest run
            --config baseUrl=http://wordpress
    after_script: # Purge
        - chmod +x ./docker/scripts/purge-ci.sh
        - ./docker/scripts/purge-ci.sh
    artifacts:
        name: test-result
        when: always # Always create cypress results
        paths:
            - cypress/screenshots
            - cypress/videos

#########################
### Stage: deploy
#########################

docker review start:
    stage: deploy
    dependencies:
        - serve and docker e2e
    script:
        # Make scripts executable
        - chmod +x docker/scripts/*
        # Cleanup previous environments
        - COMPOSE_PROJECT_NAME_SUB=-traefik ./docker/scripts/purge-ci.sh
        # Create branch-specific copy of the served plugin to persist the current state of the plugin
        - mkdir -p builds/traefik
        - cp -r dist/$PLUGIN_SLUG builds/traefik
        # Start traefik containers and sleep until server is up and running
        - export WP_CI_INSTALL_URL="$CI_COMMIT_REF_SLUG-$PLUGIN_SLUG-$CI_TRAEFIK_HOST"
        - yarn docker-compose-traefik up --build -d
        - export WP_CONTAINER_NAME=$(yarn --silent docker-compose-traefik-name-wordpress)
        - docker cp dist/$PLUGIN_SLUG $WP_CONTAINER_NAME:/var/www/html/wp-content/plugins
        - timeout=500 docker exec $WP_CONTAINER_NAME bash -c 'while [[ \"$(curl --insecure -s -o /dev/null -w ''%{http_code}'' localhost/wp-json/wprjss/v1/plugin)\" != \"200\" ]]; do sleep 2; done'
    only:
        refs:
            - branches
        variables:
            - $CI_TRAEFIK_HOST && $CI_TRAEFIK_BAUTH
    except:
        - master
    environment:
        name: review/$CI_COMMIT_REF_NAME
        url: https://${CI_COMMIT_REF_SLUG}-${PLUGIN_SLUG}-${CI_TRAEFIK_HOST}
        on_stop: docker review stop

docker review stop:
    stage: deploy
    variables:
        COMPOSE_PROJECT_NAME_SUB: -traefik
    script:
        - rm -rf builds/traefik
        - chmod +x ./docker/scripts/purge-ci.sh
        - ./docker/scripts/purge-ci.sh
    when: manual
    only:
        refs:
            - branches
        variables:
            - $CI_TRAEFIK_HOST && $CI_TRAEFIK_BAUTH
    except:
        - master
    environment:
        name: review/$CI_COMMIT_REF_NAME
        action: stop

wordpress-dot-org:
    stage: deploy
    dependencies:
        - serve and docker e2e
    when: manual
    before_script:
        - svn co $WPORG_SVN_URL wporg --username "$WPORG_SVN_USERNAME" --password "$WPORG_SVN_PASSWORD" --non-interactive --no-auth-cache
    script:
        - rm -rf wporg/assets wporg/trunk
        - mkdir wporg/assets wporg/trunk
        - cp -r assets/* wporg/assets
        - cp -r dist/$PLUGIN_SLUG-lite/* wporg/trunk
        - cd wporg
        - svn status
        - svn add --force * --auto-props --parents --depth infinity -q
        - svn ci -m "This commit is generated through CI/CD, see the GIT repository for more details ($CI_COMMIT_SHA)" --username "$WPORG_SVN_USERNAME" --password "$WPORG_SVN_PASSWORD" --non-interactive --no-auth-cache
    only:
        refs:
            - master
        variables:
            - $WPORG_SVN_URL && $WPORG_SVN_USERNAME && $WPORG_SVN_PASSWORD
