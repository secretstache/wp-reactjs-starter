const _ = require("lodash"),
    exec = require("child_process").exec,
    path = require("path");

module.exports = function(grunt) {
    grunt.loadNpmTasks("grunt-cachebuster");
    grunt.loadNpmTasks("grunt-node-modules-cachebuster");
    grunt.loadNpmTasks("grunt-contrib-copy");
    grunt.loadNpmTasks("grunt-contrib-clean");
    grunt.loadNpmTasks("grunt-contrib-compress");
    grunt.loadNpmTasks("grunt-strip-code");

    grunt.file.defaultEncoding = "utf8";

    /**
     * Tasks configuration.
     */
    grunt.config.merge({
        pkg: grunt.file.readJSON("package.json"),
        DIST_DIR: "dist", // All distribution files
        SERVE_DIR: "<%= DIST_DIR %>/<%= pkg.name %>", // Served plugin files
        clean: {
            distDir: "<%= DIST_DIR %>/**/*",
            productionSource: ["<%= SERVE_DIR %>/public/src", "<%= SERVE_DIR %>/composer.*"]
        },
        copy: {
            serve: {
                expand: true,
                src: [
                    "composer.json",
                    "index.php",
                    "inc/**/*",
                    "public/**/*",
                    "LICENSE",
                    "CHANGELOG.md",
                    "README.wporg.txt",
                    "languages/**/*"
                ],
                dest: "<%= SERVE_DIR %>"
            }
        },
        compress: {
            installablePlugin: {
                options: {
                    archive: "<%= DIST_DIR %>/<%= pkg.name %>-<%= pkg.version %>-plugin.zip"
                },
                expand: true,
                cwd: "<%= DIST_DIR %>",
                src: "<%= pkg.name %>/**/*"
            }
        },
        cachebuster: {
            public: {
                options: {
                    banner:
                        "/* This file was automatically generated by the `grunt public-cachebuster` command (" +
                        new Date().toString() +
                        "). */",
                    format: "php"
                },
                src: (function() {
                    let src = [];
                    ["dist", "dev"].forEach(function(folder) {
                        src = src.concat(["public/" + folder + "/**/*.js", "public/" + folder + "/**/*.css"]);
                    });
                    return src;
                })(),
                dest: "inc/others/cachebuster.php"
            }
        },
        node_modules_cachebuster: {
            publiclib: {
                options: {
                    banner:
                        "/* This file was automatically generated by the `grunt public-cachebuster` command (" +
                        new Date().toString() +
                        "). */",
                    format: "php"
                },
                src: ["public/lib/*"],
                dest: "inc/others/cachebuster-lib.php"
            }
        }
    });

    grunt.registerTask("public-cachebuster", ["cachebuster:public", "node_modules_cachebuster:publiclib"]);

    grunt.registerTask("copy-npmLibs", ["clean:npmLibs", "copy:npmLibs", "node_modules_cachebuster:publiclib"]);

    grunt.registerTask("productionComposerInstallation", function() {
        const done = this.async(),
            serveDir = grunt.config.get("SERVE_DIR");
        grunt.log.writeln("Install no-dev composer dependencies... (SERVE_DIR=" + serveDir + ")");
        exec("composer install --no-dev --no-scripts --prefer-dist --working-dir " + serveDir, function(
            error,
            stdout,
            stderr
        ) {
            console.log(stdout);
            done();
        });
    });

    /**
     * Serve the whole plugin to the distribution files.
     */
    grunt.registerTask(
        "serve",
        [
            "clean:distDir",
            "copy:serve",
            "productionComposerInstallation",
            "clean:productionLibs",
            "strip_code:sourcemaps"
        ].concat(grunt.config.get("SERVE_POST_TASKS") || [])
    );

    /**
     * Versioning task that modifies the index.php file and reflects the same version
     * as in package.json.
     */
    grunt.registerTask("postversion", function() {
        const version = grunt.config.get("pkg.version"),
            indexphp = grunt.file.read("index.php"),
            newindexphp = indexphp.replace(/Version:(\s*)(.*)$/gm, "Version:$1" + version);
        grunt.file.write("index.php", newindexphp);
    });

    /**
     * Generate the README.txt from README.wporg.txt and allow includes through
     * the [include:$FILE] syntax so wordpress.org can consume it.
     */
    grunt.registerTask("serveReadmeTxt", function() {
        const serveDir = grunt.config.get("SERVE_DIR");
        let publicTxt = grunt.file.read(serveDir + "/README.wporg.txt");
        publicTxt = publicTxt.replace(/\[include:([^\]]+)\]/g, (matched, index) =>
            grunt.file.exists(serveDir + "/" + index) ? grunt.file.read(serveDir + "/" + index) : matched
        );
        grunt.file.write(serveDir + "/README.txt", publicTxt);
        grunt.file.delete(serveDir + "/README.wporg.txt");
    });

    /**
     * Rename README.md to README.txt so it can be consumed by wordpress.org. This task
     * is replaced by serveReadmeTxt and is only here for legacy purposes (legacy branch).
     *
     * @legacy
     */
    grunt.registerTask("serveRenameReadme", function() {
        const serveDir = grunt.config.get("SERVE_DIR");
        grunt.file.copy(serveDir + "/README.md", serveDir + "/README.txt");
        grunt.file.delete(serveDir + "/README.md");
    });
};
